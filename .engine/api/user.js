// Generated by LiveScript 1.3.0
(function(){
  var fs, fsExtra, path, crypto, readChunk, sharp, expressFormidable, uploadr, aux;
  fs = require('fs');
  fsExtra = require('fs-extra');
  path = require('path');
  crypto = require('crypto');
  readChunk = require('read-chunk');
  sharp = require('sharp');
  expressFormidable = require('express-formidable');
  uploadr = require('uploadr');
  aux = require('../aux');
  (function(it){
    return module.exports = it;
  })(function(engine, io){
    var api, app, clearUserCookie, renderProfile;
    api = engine.router.api;
    app = engine.app;
    clearUserCookie = function(req, res){
      res.clearCookie('connect.sid', {
        path: '/',
        domain: "." + engine.config.domain
      });
      res.clearCookie('connect.sid', {
        path: '/'
      });
      ['localhost', 'loading.io', '.loading.io'].map(function(it){
        return res.clearCookie('connect.sid', {
          path: '/',
          domain: it
        });
      });
      return res.clearCookie('global', {
        path: '/',
        domain: "." + engine.config.domain
      });
    };
    api.get("/me/reauth/", function(req, res){
      clearUserCookie(req, res);
      return res.send();
    });
    app.get("/me/reauth/", function(req, res){
      var that;
      clearUserCookie(req, res);
      return res.redirect("/auth/" + ((that = req.query.nexturl) ? "?nexturl=" + that : ''));
    });
    api['delete']('/me/', function(req, res){
      var key;
      if (!(req.user && req.user.key)) {
        return aux.r400(res);
      }
      key = req.user.key;
      req.logout();
      return io.query("delete from users where key = $1", [key])['catch'](function(){
        return io.query("update users\nset (username,displayname,deleted)\n= (('deleted-' || key),('user ' || key),true)\nwhere key = $1", [key]);
      }).then(function(){
        return res.send();
      })['catch'](aux.errorHandler(res));
    });
    api.get('/me/', function(req, res){
      var ret, id;
      ret = {};
      if (!req.user) {
        return res.json('{}');
      }
      id = req.user.key;
      return io.query("select key,displayname,description from users where key = $1", [id]).then(function(r){
        r == null && (r = {});
        if (!r.rows || !r.rows.length) {
          return aux.reject(404);
        }
        return ret.user = r.rows[0];
      }).then(function(r){
        r == null && (r = {});
        res.send(ret);
        return null;
      })['catch'](aux.errorHandler(res));
    });
    renderProfile = function(req, res, id){
      var ret;
      ret = {};
      return io.query("select key,displayname, description from users where key = $1", [id]).then(function(r){
        r == null && (r = {});
        if (!r.rows || !r.rows.length) {
          return aux.reject(404);
        }
        ret.user = r.rows[0];
        res.render('me/profile.pug', ret);
        return null;
      })['catch'](aux.errorHandler(res));
    };
    app.get('/me/', aux.needlogin(function(req, res){
      return renderProfile(req, res, req.user.key);
    }));
    app.get('/user/:id', aux.numid(true, function(req, res){
      return io.query("select key,displayname,description,createdtime,plan from users where key = $1 and deleted is not true", [req.params.id]).then(function(r){
        r == null && (r = {});
        if (!r.rows || !r.rows.length) {
          return aux.reject(404);
        }
        return res.render('me/user.pug', {
          user: r.rows[0]
        });
      })['catch'](aux.errorHandler(res));
    }));
    app.get('/me/settings/', aux.needlogin(function(req, res){
      return res.render('me/settings.pug', {
        user: req.user
      });
    }));
    api.put('/user/:id', aux.numid(false, function(req, res){
      var ref$, displayname, description, public_email;
      if (!req.user || req.user.key !== +req.params.id) {
        return aux.r403(res);
      }
      ref$ = {
        displayname: (ref$ = req.body).displayname,
        description: ref$.description,
        public_email: ref$.public_email
      }, displayname = ref$.displayname, description = ref$.description, public_email = ref$.public_email;
      displayname = (displayname + "").trim();
      description = (description + "").trim();
      public_email = !public_email;
      if (displayname.length > 30 || displayname.length < 1) {
        return aux.r400(res, "profile.displayname.length");
      }
      if (description.length > 200) {
        return aux.r400(res, "profile.description.toolong");
      }
      return io.query("update users set (displayname,description,public_email) = ($1,$2,$3) where key = $4", [displayname, description, public_email, req.user.key]).then(function(){
        var ref$;
        ref$ = req.user;
        ref$.displayname = displayname;
        ref$.description = description;
        ref$.public_email = public_email;
        req.login(req.user, function(){
          return res.send();
        });
        return null;
      });
    }));
    app.put('/me/avatar', engine.multi.parser, function(req, res){
      if (!req.user) {
        return aux.r403(res);
      }
      if (!req.files.image) {
        return aux.r400(res);
      }
      return fsExtra.ensureDir("static/s/avatar/").then(function(){
        return sharp(req.files.image.path).resize(200, 200).toFile("static/s/avatar/" + req.user.key + ".png", function(err, info){
          if (err) {
            return aux.r500(res, err + "");
          }
          return res.send();
        });
      })['catch'](function(){
        return aux.r500(res);
      });
    });
    api.post('/me/sync/', function(req, res){
      if (!req.user || !req.user.key) {
        return aux.r400(res);
      }
      return res.send(req.user);
    });
    api.put('/me/passwd/', function(req, res){
      var ref$, n, o;
      ref$ = {
        n: (ref$ = req.body).n,
        o: ref$.o
      }, n = ref$.n, o = ref$.o;
      if (!req.user || !req.user.usepasswd) {
        return aux.r400(res);
      }
      if (n.length < 4) {
        return aux.r400(res, "profile.newPassword.length");
      }
      return io.query("select password from users where key = $1", [req.user.key]).then(function(arg$){
        var rows;
        rows = arg$.rows;
        if (!rows || !rows[0]) {
          return aux.reject(403);
        }
        return io.authio.user.compare(o, rows[0].password)['catch'](function(){
          return aux.reject(403, "profile.oldPassword.mismatch");
        });
      }).then(function(){
        return io.authio.user.hashing(n, true, true);
      }).then(function(pwHashed){
        req.user.password = pwHashed;
        return io.query("update users set password = $1 where key = $2", [pwHashed, req.user.key]);
      }).then(function(){
        req.login(req.user, function(){
          return res.send();
        });
        return null;
      })['catch'](aux.errorHandler(res));
    });
    api.put('/me/su/:id', function(req, res){
      if (!req.user || req.user.username !== 'tkirby@gmail.com') {
        return aux.r403(res);
      }
      return io.query("select * from users where key = $1", [+req.params.id]).then(function(r){
        r == null && (r = {});
        if (!r.rows || !r.rows[0]) {
          return aux.reject(404);
        }
        import$(req.user, r.rows[0]);
        req.logIn(r.rows[0], function(){
          return res.send();
        });
        return null;
      })['catch'](aux.errorHandler(res));
    });
    api.post('/me/legal/', function(req, res){
      var ref$;
      if (!(req.user && req.user.key)) {
        return aux.r400(res);
      }
      ((ref$ = req.user).config || (ref$.config = {})).legal = new Date().getTime();
      return io.query("update users set config = $2 where key = $1", [req.user.key, req.user.config]).then(function(){
        return res.send();
      })['catch'](aux.errorHandler(res));
    });
    api.post('/me/config/', function(req, res){
      var ref$;
      if (!(req.user && req.user.key)) {
        return aux.r400(res);
      }
      if (!req.body || typeof req.body !== 'object') {
        return aux.r400(res);
      }
      import$((ref$ = req.user).config || (ref$.config = {}), {
        legal: req.body.legal
      });
      return io.query("update users set config = $2 where key = $1", [req.user.key, req.user.config]).then(function(){
        return res.send();
      })['catch'](aux.errorHandler(res));
    });
    api.get('/me/condolence', function(req, res){
      if (!(req.user && req.user.key)) {
        return res.send({});
      }
      return io.query("select * from condolence where owner = $1", [req.user.key]).then(function(r){
        r == null && (r = {});
        return (res.send(r.rows) || [])[0] || {};
      })['catch'](aux.errorHandler(res));
    });
    api.post('/condolence', expressFormidable(), function(req, res){
      var ref$, content, source, contact, publish, social, e, file;
      try {
        ref$ = req.fields, content = ref$.content, source = ref$.source, contact = ref$.contact, publish = ref$.publish, social = ref$.social;
      } catch (e$) {
        e = e$;
        return aux.r400(res);
      }
      if (!(content && source && contact && publish)) {
        return aux.r400(res);
      }
      file = (req.files["file"] || {}).path;
      publish = publish === "1";
      return (req.user && req.user.key
        ? io.query("select key,image from condolence where owner = $1", [req.user.key])
        : Promise.resolve({
          rows: []
        })).then(function(r){
        r == null && (r = {});
        if (r.rows.length) {
          return io.query("update condolence\nset (content,source,contact,publish,image,social,verified)\n= ($2,$3,$4,$5,$6,$7,false) where owner = $1\nreturning key", [req.user.key, content, source, contact, publish, r.rows[0].image || !!file, social]);
        } else {
          return io.query("insert into condolence\n(owner,content,source,contact,publish,image,social,verified)\nvalues ($1,$2,$3,$4,$5,$6,$7,false)\nreturning key", [req.user ? req.user.key : null, content, source, contact, publish, !!file, social]);
        }
      }).then(function(r){
        r == null && (r = {});
        if (file && (r.rows || (r.rows = [])).length) {
          return new Promise(function(res, rej){
            var key, root;
            key = r.rows[0].key;
            root = "static/assets/uploads";
            return fsExtra.ensureDir(root, function(e){
              if (e) {
                return rej(e);
              }
              return sharp(file).resize(800, 600, {
                fit: 'outside'
              }).toFile(path.join(root, key + ".png"), function(e, i){
                if (e) {
                  return rej(e);
                } else {
                  return res();
                }
              });
            });
          });
        } else {
          return Promise.resolve();
        }
      }).then(function(){
        return res.send({});
      })['catch'](aux.errorHandler(res));
    });
    api.get('/condolence', function(req, res){
      var offset, latest;
      offset = req.params.offset || 0;
      latest = req.params.rev !== "false";
      return io.query("select * from condolence\nwhere verified = true and publish = true\norder by createdtime " + (!latest ? 'desc' : '') + "\noffset $1 limit 300", [offset]).then(function(r){
        r == null && (r = {});
        return res.send(r.rows || []);
      })['catch'](aux.errorHandler(res));
    });
    api.get('/condolence/admin', aux.authorizedApi, function(req, res){
      var ref$, offset, source, verified;
      ref$ = req.params, offset = ref$.offset, source = ref$.source, verified = ref$.verified;
      return io.query("select * from condolence\nwhere source ~ $1 and verified = $2\noffset $3", [source, verified, offset]).then(function(r){
        r == null && (r = {});
        return res.send(r.rows || []);
      })['catch'](aux.errorHandler(res));
    });
    return app.get('/condolence/admin', aux.authorized(function(req, res){
      return res.render('admin/review.pug');
    }));
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
