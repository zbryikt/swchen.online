doctype html
html
  head
    include /../../static/assets/lib/ldui/pug/ldui.pug
    meta(charset="utf-8")
    include /modules/ga.html
    link(href="https://fonts.googleapis.com/css?family=Noto+Sans+TC:300,400,500,700|Roboto:300,500&display=swap",rel="stylesheet")
    +css("/assets/lib/bootstrap/4.3.1/css/bootstrap.min.css")
    +css("/assets/lib/ldui/ldui.min.css")
    +css("/css/index.css")
    style(type="text/css"): :stylus
      body { background: #ccc!important }
  body
    .ldld.full.ld.running.z-fixed
    #sample.card.shadow-lg.position-absolute.border-0.d-none.bg-cover(style="width:430px;height:300px;max-width:90%;max-height:90%;overflow:scroll;background-position:center top")
      .card-body(style="background:rgba(255,255,255,.5)")
        .font-weight-bold.mb-4.text-lg(ld="name")
        p(ld="description")
    #container
    +script("/js/pack/vendor.min.js")
    +script("/js/pack/base.min.js")
    script: :lsc

      ldld = new ldLoader root: ".ldld.full.ld"
      lc = {zidx: 1, pidx: 0, cidx: 0, cs: []}
      sample = ld$.find \#sample, 0
      container = ld$.find \#container, 0
      ani-in = "ld-float-btt-in"
      cards = []
      tbr = []
      pos = [[10,10], [60,10], [65,55], [10,55], [25,35], [46,45],[42,10]]
      handler = (t) ->
        if lc.cs.length and (!cards.length or (t > (cards[* - 1] or {}).time + 5000 + Math.random! * 3000)) =>
          cards.push n = sample.cloneNode true
          n.removeAttribute \id
          [w,h] = [window.innerWidth, window.innerHeight]
          c = (lc.cs or [])[lc.cidx]
          lc.cidx = ((lc.cidx or 0) + 1) % ( lc.[]cs.length or 1)
          if lc.cidx == 0 => condolences.fetch!
          if c => 
            n.time = t
            n.life = 30000 + Math.random! * 30000
            ld$.find(n, '[ld=name]', 0).innerText = c.source
            ld$.find(n, '[ld=description]', 0).innerText = c.content
            n.classList.add \ld, ani-in
            box = {width: Math.min(430,w), height: Math.min(300,h)}
            px = (Math.random! * 20 - 10 + pos[lc.pidx][0]) * w / 100
            py = (Math.random! * 20 - 10 + pos[lc.pidx][1]) * h / 100
            if px < 10 => px = 10
            if py < 10 => py = 10
            if px + box.width > w - 10 => px = w - box.width - 10
            if py + box.height > h - 10 => py = h - box.height - 10
            n.style.left = "#{px}px"
            n.style.top = "#{py}px"
            lc.pidx = (lc.pidx + 1) % pos.length
            n.style.zIndex = (lc.zidx++)
            if c.image =>
              n.style.backgroundImage = "url(/assets/uploads/#{c.key}.png)"
            n.classList.remove \d-none
            container.appendChild n

        for i from cards.length - 1 to 0 by -1 =>
          c = cards[i]
          if c.time + c.life > t => continue
          c.classList.add \ld-fade-out
          c.classList.remove ani-in
          cards.splice i, 1
          tbr.push c
        for i from tbr.length - 1 to 0 by -1 =>
          c = tbr[i]
          if c.time + c.life + 1000 > t => continue
          if c.parentNode => c.parentNode.removeChild c
          tbr.splice i, 1
        requestAnimationFrame (-> handler it)

      condolences = new ldPage do
        limit: 300
        host: window
        fetch: ->
          ld$.fetch '/d/condolence', {method: \GET}, {type: \json, params: {offset: @offset}}
            .then (list) ->
              # toggle off the first load
              list.map -> it.len = (it.content or '').length
              list.sort (a,b) ->
                d = b.len - a.len
                if d == 0 => return 0
                if Math.random! > 1 / ( 1 + Math.exp(-d)) => return -1 else return 1
              #list.map -> if (it.content or '').length > 200 => it.content = it.content.substring(0,200) + '...'

              ldld.off!
              lc.cs = list ++ (lc.cs or [])
              lc.cidx = 0
              return list
      condolences.fetch!
      requestAnimationFrame (-> handler it)
