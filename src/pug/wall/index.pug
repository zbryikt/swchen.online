doctype html
html
  head
    include /../../static/assets/lib/ldui/pug/ldui.pug
    meta(charset="utf-8")
    include /modules/ga.html
    link(href="https://fonts.googleapis.com/css?family=Noto+Sans+TC:300,400,500,700|Roboto:300,500&display=swap",rel="stylesheet")
    +css("/assets/lib/bootstrap/4.3.1/css/bootstrap.min.css")
    +css("/assets/lib/ldui/ldui.min.css")
    +css("/css/index.css")
    style(type="text/css"): :stylus
      body { background: #ccc!important }
  body
    .ldld.full.ld.ld-spinner.running.z-fixed
    #sample.card.shadow-lg.position-absolute.border-0.d-none.bg-cover.bg-portrait(style="width:30%")
      .card-body(style="background:rgba(255,255,255,.5)")
        .font-weight-bold.mb-4.text-lg(ld="name")
        p(ld="description")
    #container
    +script("/js/pack/vendor.min.js")
    +script("/js/pack/base.min.js")
    script: :lsc
      ldld = new ldLoader root: ".ldld.full"
      lc = {zidx: 1, pidx: 0, cidx: 0, cs: []}
      sample = ld$.find \#sample, 0
      container = ld$.find \#container, 0
      ani-in = "ld-float-btt-in"
      cards = []
      tbr = []
      pos = [[10,10], [60,10], [65,55], [10,55], [25,35], [46,45],[42,10]]
      handler = (t) ->
        if !cards.length or (t > (cards[* - 1] or {}).time + 2000) =>
          cards.push n = sample.cloneNode true
          c = (lc.cs or [])[lc.cidx]
          lc.cidx = ((lc.cidx or 0) + 1) % ( lc.[]cs.length or 1)
          if c => 
            n.time = t
            n.life = 10000 + Math.random! * 10000
            ld$.find(n, '[ld=name]', 0).innerText = c.source
            ld$.find(n, '[ld=description]', 0).innerText = c.content
            n.classList.add \ld, ani-in
            n.style.left = "#{Math.random! * 20 - 10 + pos[lc.pidx][0]}%"
            n.style.top = "#{Math.random! * 20 - 10 + pos[lc.pidx][1]}%"
            lc.pidx = (lc.pidx + 1) % pos.length
            n.style.zIndex = (lc.zidx++)
            if c.image =>
              n.style.backgroundImage = "url(/assets/uploads/#{c.key}.png)"
            n.classList.remove \d-none
            container.appendChild n

        for i from cards.length - 1 to 0 by -1 =>
          c = cards[i]
          if c.time + c.life > t => continue
          c.classList.add \ld-fade-out
          c.classList.remove ani-in
          cards.splice i, 1
          tbr.push c
        for i from tbr.length - 1 to 0 by -1 =>
          c = tbr[i]
          if c.time + c.life + 1000 > t => continue
          c.parentNode.removeChild c
          tbr.splice i, 1
        requestAnimationFrame (-> handler it)

      ld$.fetch '/d/condolence', {method: \GET}, {type: \json, params: {offset: 0}}
        .then ->
          lc.cs = (lc.cs or []) ++ it
          ldld.off!
          requestAnimationFrame (-> handler it)
