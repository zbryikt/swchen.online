// Generated by LiveScript 1.3.0
(function(){
  ldc.register('editor', ['loader'], function(arg$){
    var loader, lc, ldld, el, cm, bbox, sdb, view, render, watch, init, update, this$ = this;
    loader = arg$.loader;
    lc = {
      name: 'biography'
    };
    ldld = new ldLoader({
      root: '.ldld.full'
    });
    ldld.on();
    el = {
      editor: ld$.find("[ld=editor]", 0),
      viewer: ld$.find("[ld=viewer]", 0)
    };
    cm = CodeMirror(el.editor, {
      mode: 'yaml',
      lineNumbers: true,
      theme: 'ayu-mirage',
      lineWrapping: true,
      keyMap: "default",
      showCursorWhenSelecting: true,
      viewportMargin: Infinity
    });
    bbox = el.editor.getBoundingClientRect();
    cm.setSize(bbox.width, bbox.height);
    cm.setValue('');
    cm.on('change', function(){
      return update();
    });
    sdb = new sharedbWrapper({
      url: {
        scheme: window.location.protocol.replace(':', ''),
        domain: window.location.host
      }
    });
    sdb.on('close', function(){
      return lda.ldcvmgr.toggle('disconnected');
    });
    view = new ldView({
      root: el.viewer,
      handler: {
        "timeline-item": {
          list: function(){
            return lc.parsedData || [];
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            ld$.find(node, '[ld=year]', 0).innerText = data.year;
            ld$.find(node, '[ld=title]', 0).innerText = data.title;
            return ld$.find(node, '[ld=content]', 0).innerHTML = DOMPurify.sanitize(marked(data.content));
          }
        }
      }
    });
    render = debounce(function(){
      var ret;
      console.log(lc.cur.biography);
      lc.parsedData = ret = jsyaml.load(lc.cur.biography);
      return view.render();
    });
    watch = function(ops, self){
      var cval, rval;
      if (self) {
        return;
      }
      cval = cm.getValue();
      rval = (lc.doc.data || {})[lc.name];
      if (cval !== rval) {
        (lc.old || (lc.old = {}))[lc.name] = (lc.cur || (lc.cur = {}))[lc.name] = rval;
        cm.setValue(rval || '');
        return render();
      }
    };
    init = function(){
      return sdb.get({
        id: 'biography',
        watch: watch
      }).then(function(doc){
        lc.doc = doc;
        lc.old = JSON.parse(JSON.stringify(doc.data));
        lc.cur = JSON.parse(JSON.stringify(doc.data));
        cm.setValue((lc.cur || (lc.cur = {}))[lc.name] || '');
        ldld.off();
        return render();
      })['catch'](function(it){
        return console.log('document open failed: ', it);
      });
    };
    update = function(){
      var val;
      val = cm.getValue();
      if ((lc.cur || (lc.cur = {}))[lc.name] === val) {
        return;
      }
      (lc.cur || (lc.cur = {}))[lc.name] = val;
      if (lc.doc) {
        lc.doc.submitOp(sdb.json.diff(lc.old, lc.cur));
      }
      (lc.old || (lc.old = {}))[lc.name] = val;
      return render();
    };
    return init();
  });
  return ldc.app('editor');
})();